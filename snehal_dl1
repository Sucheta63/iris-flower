import tensorflow as tf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 

%matplotlib inline

from sklearn.model_selection import train_test_split
from sklearn.compose import make_column_transformer
from sklearn.preprocessing import MinMaxScaler

(X_train,y_train),(X_test,y_test)=tf.keras.datasets.boston_housing.load_data(
    path='boston_hosing_npz',
    test_split=0.2,
    seed=42
)

X_train_df=pd.DataFrame(X_train)
y_train_df=pd.DataFrame(y_train)

ct=make_column_transformer(
    (MinMaxScaler(),[1,2,4,5,6,7,8,9,10,11,12])
)

X_train=ct.fit_transform(X_train).astype('float32')
X_test=ct.transform(X_test).astype('float32')
y_train=y_train.astype('float32')
y_test=y_test.astype('float32')

x_train,x_val,y_train,y_val=train_test_split(X_train,y_train,test_size=0.1,random_state=42)

tf.random.set_seed(42)

model=tf.keras.Sequential([
    tf.keras.layers.Dense(units=10,activation='relu',input_shape=(x_train.shape[1],),name='dense1'),
    tf.keras.layers.Dense(units=100,activation='relu',name='dense2'),
    tf.keras.layers.Dense(units=1,name='prediction')
])

model.compile(
    loss=tf.keras.losses.mean_squared_error,
    optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.01),
    metrics=['mse']
)


history=model.fit(
    x_train,
    y_train,
    epochs=50,
    batch_size=42,
    validation_data=(x_val,y_val)

)

y_train.mean(),y_val.mean()

y_pred=model.predict(X_test)
y_pred

loss,mse=model.evaluate(X_test,y_test,batch_size=32)
loss
mse

pd.DataFrame(history.history).plot(figsize=(6,4),xlabel="epochs",ylabel='loss',title='losscurve')
plt.show()

y = y_pred #y-axis
x = y_test #x-axis
fig, ax = plt.subplots(figsize=(10,6)) # create figure
ax.scatter(x,y) #scatter plots for x,y
ax.set(xlim=(0,55), ylim=(0, 55)) #set limit
ax.plot(ax.get_xlim(), ax.get_ylim(), color ='red') # draw 45 degree diagonal in figure
plt.xlabel('True Values')
plt.ylabel('Predicted values')
plt.title('Evaluation Result')
plt.show()




